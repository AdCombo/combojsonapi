# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, AdCombo
# This file is distributed under the same license as the combojsonapi
# package.
# Suren Khorenyan <surenkhorenyan@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: combojsonapi 1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-16 16:21+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../using_plugins.rst:5
msgid "Using Plugins"
msgstr "Работа с плагинами"

#: ../../using_plugins.rst:8
msgid "Attaching Plugins"
msgstr "Подключение плагинов"

#: ../../using_plugins.rst:9
msgid ""
"Plugins are attached with JSON API initialization. Here's a example of "
"**EventPlugin** usage:"
msgstr ""
"Плагины подключаются в момент инициализации JSON API. Рассмотрим пример "
"подключения плагина **EventPlugin**"

#: ../../using_plugins.rst:27
msgid "Plugins API"
msgstr "API для плагинов"

#: ../../using_plugins.rst:28
msgid "**Following hooks are available at plugin initialization**"
msgstr "**При реализации плагина доступны следующие hooks**"

#: ../../using_plugins.rst:30
msgid ":code:`before_init_plugin(self, *args, app=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:32
msgid "Fired before json_api initializes"
msgstr "срабатывает перед инициализацией json_api"

#: ../../using_plugins.rst:34 ../../using_plugins.rst:40
msgid ":code:`app` - link to Flask instance object"
msgstr ":code:`app` - ссылка на объект приложения Flask."

#: ../../using_plugins.rst:36
msgid ":code:`after_init_plugin(self, *args, app=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:38
msgid "Fired after json_api initializes"
msgstr "срабатывает после инициализации json_api"

#: ../../using_plugins.rst:42
msgid ""
":code:`before_route(self, resource: Union[ResourceList, ResourceDetail] ="
" None, view=None, urls: Tuple[str] = None, self_json_api: Api = None, "
"**kwargs) -> None:`"
msgstr ""

#: ../../using_plugins.rst:44
msgid "Resource managers pre-parsing before routers are created"
msgstr "Предобработка ресурс менеджеров до создания роутеров"

#: ../../using_plugins.rst:46 ../../using_plugins.rst:55
msgid ":code:`resource` - resource manager;"
msgstr ":code:`resource` - ресурс менеджер;"

#: ../../using_plugins.rst:47 ../../using_plugins.rst:56
msgid ":code:`view` - resource manager name;"
msgstr ":code:`view` - название ресурс менеджера;"

#: ../../using_plugins.rst:48 ../../using_plugins.rst:57
msgid ":code:`urls` - URLs list at which resource will be available;"
msgstr ":code:`urls` - список url, по которым будет доступен данный ресурс;"

#: ../../using_plugins.rst:49 ../../using_plugins.rst:58
#: ../../using_plugins.rst:94 ../../using_plugins.rst:103
#: ../../using_plugins.rst:112 ../../using_plugins.rst:121
#: ../../using_plugins.rst:130 ../../using_plugins.rst:139
#: ../../using_plugins.rst:148
msgid ":code:`self_json_api` - link to Api instance."
msgstr ":code:`self_json_api` - ссылка на объект Api."

#: ../../using_plugins.rst:51
msgid ""
":code:`after_route(self, resource: Union[ResourceList, ResourceDetail] = "
"None, view=None, urls: Tuple[str] = None, self_json_api: Api = None, "
"**kwargs) -> None:`"
msgstr ""

#: ../../using_plugins.rst:53
msgid "Resource managers post-parsing after routers are created"
msgstr "Постобработка ресурс менеджеров после создания роутеров"

#: ../../using_plugins.rst:60
msgid ""
":code:`after_init_schema_in_resource_list_post(self, *args, schema=None, "
"model=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:62
msgid "Called after marshmallow schema initialization in ResourceList.post"
msgstr "Выполняется после инициализация marshmallow схемы в ResourceList.post"

#: ../../using_plugins.rst:64 ../../using_plugins.rst:71
#: ../../using_plugins.rst:78 ../../using_plugins.rst:85
msgid ""
":code:`schema` - serialization/deserialization schema linked with the "
"resource;"
msgstr ""
":code:`schema` - схема, которая привязана к ресурсу для "
"сериализации/десериализации;"

#: ../../using_plugins.rst:65 ../../using_plugins.rst:72
#: ../../using_plugins.rst:79 ../../using_plugins.rst:86
msgid ":code:`model` - model linked with the resource."
msgstr ":code:`model` - модель, которая привязана к ресурсу."

#: ../../using_plugins.rst:67
msgid ""
":code:`after_init_schema_in_resource_list_get(self, *args, schema=None, "
"model=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:69
msgid "Called after marshmallow schema initialization in ResourceList.get"
msgstr "Выполняется после инициализация marshmallow схемы в ResourceList.get"

#: ../../using_plugins.rst:74
msgid ""
":code:`after_init_schema_in_resource_detail_get(self, *args, schema=None,"
" model=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:76
msgid "Called after marshmallow schema initialization in ResourceDetail.get"
msgstr "Выполняется после инициализация marshmallow схемы в ResourceDetail.get"

#: ../../using_plugins.rst:81
msgid ""
":code:`after_init_schema_in_resource_detail_patch(self, *args, "
"schema=None, model=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:83
msgid "Called after marshmallow schema initialization in ResourceDetail.patch"
msgstr "Выполняется после инициализация marshmallow схемы в ResourceDetail.patch"

#: ../../using_plugins.rst:88
msgid ""
":code:`data_layer_before_create_object(self, *args, data=None, "
"view_kwargs=None, self_json_api=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:90
msgid ""
"Called after data deserialization and before forming a database request "
"to create a new object"
msgstr ""
"Выполняется после десериализации данных и до создания запроса к бд на "
"создание нового объекта"

#: ../../using_plugins.rst:92
msgid ":code:`data` - deserialized data;"
msgstr ":code:`data` - десериализованнаые данные для создания объекта;"

#: ../../using_plugins.rst:93 ../../using_plugins.rst:101
#: ../../using_plugins.rst:110 ../../using_plugins.rst:120
#: ../../using_plugins.rst:129 ../../using_plugins.rst:138
#: ../../using_plugins.rst:147
msgid ":code:`view_kwargs` - resource manager kwargs;"
msgstr ":code:`view_kwargs` - kwargs из ресурс менеджера;"

#: ../../using_plugins.rst:96
msgid ""
":code:`data_layer_create_object_clean_data(self, *args, data: Dict = "
"None, view_kwargs=None, join_fields: List[str] = None, "
"self_json_api=None, **kwargs) -> Dict`"
msgstr ""

#: ../../using_plugins.rst:98
msgid ""
"Parses input data and returns parsed data set, from which a new object "
"will be created."
msgstr ""
"Обрабатывает данные, которые пойдут непосредственно на создание нового "
"объекта. Возвращает обновлённый набор данных для нового объекта"

#: ../../using_plugins.rst:100
msgid ":code:`Dict data` - deserialized unparsed data set;"
msgstr ""
":code:`Dict data` - сырые данные, на основе которых будет создан новый "
"объект;"

#: ../../using_plugins.rst:102
msgid ":code:`List[str] join_fields` - fields which are linked to other models;"
msgstr ""
":code:`List[str] join_fields` - список полей, которые являются ссылками "
"на другие модели;"

#: ../../using_plugins.rst:105
msgid ""
":code:`data_layer_after_create_object(self, *args, data=None, "
"view_kwargs=None, self_json_api=None, obj=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:107
msgid "Called after object creation but before saving it to the database."
msgstr "Выполняется после создание нового объекта, но до сохранения в БД"

#: ../../using_plugins.rst:109
msgid ":code:`Dict data` - data used to create the new object;"
msgstr ":code:`Dict data` - данные, использованные для создания нового объекта;"

#: ../../using_plugins.rst:111
msgid ":code:`obj` - object created from data;"
msgstr ":code:`obj` - новый объект, созданный на основе data;"

#: ../../using_plugins.rst:114
msgid ""
":code:`data_layer_get_object_update_query(self, *args, query: Query = "
"None, qs: QueryStringManager = None, view_kwargs=None, "
"self_json_api=None, **kwargs) -> Query`"
msgstr ""

#: ../../using_plugins.rst:116
msgid ""
"Called during database query creation for updating a single object. Query"
" can be patched here, if needed. Returns patched DB query."
msgstr ""
"Вызывается во время создания запроса к БД на обновление объекта. Тут "
"можно пропатчить запрос к БД. Возвращает пропатченный запрос к бд"

#: ../../using_plugins.rst:118 ../../using_plugins.rst:127
msgid ":code:`Query query` - generated database query;"
msgstr ":code:`Query query` - сформированный запрос к БД;"

#: ../../using_plugins.rst:119 ../../using_plugins.rst:128
msgid ":code:`QueryStringManager qs` - query parameters list;"
msgstr ":code:`QueryStringManager qs` - список параметров для запроса;"

#: ../../using_plugins.rst:123
msgid ""
":code:`data_layer_get_collection_update_query(self, *args, query: Query ="
" None, qs: QueryStringManager = None, view_kwargs=None, "
"self_json_api=None, **kwargs) -> Query`"
msgstr ""

#: ../../using_plugins.rst:125
msgid ""
"Called during database query creation for updating multiple objects. "
"Query can be patched here, if needed. Returns patched DB query."
msgstr ""
"Во время создания запроса к БД на обновление объектов. Тут можно "
"пропатчить запрос к БД. Возвращает пропатченный запрос к бд"

#: ../../using_plugins.rst:132
msgid ""
":code:`data_layer_update_object_clean_data(self, *args, data: Dict = "
"None, obj=None, view_kwargs=None, join_fields: List[str] = None, "
"self_json_api=None, **kwargs) -> Dict`"
msgstr ""

#: ../../using_plugins.rst:134
msgid "Parses data for the object to be updated. Returns parsed data set."
msgstr ""
"Обрабатывает данные, которые пойдут непосредственно на обновления "
"объекта. Возвращает обновлённый набор данных data для обновления объекта"

#: ../../using_plugins.rst:136
msgid ":code:`Dict data` - data with which the object is to be updated;"
msgstr ":code:`Dict data` - данные, которыми будет обновлён объект;"

#: ../../using_plugins.rst:137
msgid ":code:`obj` - object to be updated;"
msgstr ":code:`obj` - редактируемый объект;"

#: ../../using_plugins.rst:140
msgid ":code:`List[str] join_fields` - fields which are linked to other models."
msgstr ""
":code:`List[str] join_fields` - список полей, которые являются ссылками "
"на другие модели."

#: ../../using_plugins.rst:142
msgid ""
":code:`data_layer_delete_object_clean_data(self, *args, obj=None, "
"view_kwargs=None, self_json_api=None, **kwargs) -> None`"
msgstr ""

#: ../../using_plugins.rst:144
msgid "Called before deleting object from the database."
msgstr "Выполняется до удаления объекта из БД"

#: ../../using_plugins.rst:146
msgid ":code:`obj` - object to delete;"
msgstr ":code:`obj` - удаляемый объект;"

#: ../../using_plugins.rst:150
msgid ""
":code:`before_data_layers_filtering_alchemy_nested_resolve(self, "
"self_nested: Any) -> None`"
msgstr ""

#: ../../using_plugins.rst:152
msgid ""
"Called before filter is created in Nested.resolve. When returns None, "
":code:`resolve` continues executing; when returns any other value, "
":code:`resolve` exits, and the hook function result is passed further in "
"the call stack."
msgstr ""
"Вызывается до создания фильтра в функции Nested.resolve, если после "
"выполнения вернёт None, то дальше продолжится работа функции resolve, "
"если вернёт какое либо значения отличное от None, то функция resolve "
"завершается, а результат hook функции передаётся дальше в стеке вызова."

#: ../../using_plugins.rst:155 ../../using_plugins.rst:162
msgid ":code:`self_nested` - :code:`Nested` instance."
msgstr ":code:`self_nested` - экземпляр :code:`Nested`."

#: ../../using_plugins.rst:157
msgid ""
":code:`before_data_layers_sorting_alchemy_nested_resolve(self, "
"self_nested: Any) -> None`"
msgstr ""

#: ../../using_plugins.rst:159
msgid ""
"Called before sort is created in Nested.resolve. When returns None, "
":code:`resolve` continues executing; when returns any other value, "
":code:`resolve` exits, and the hook function result is passed further in "
"the call stack."
msgstr ""

#: ../../using_plugins.rst:165
msgid "Making a New Plugin Example"
msgstr "Пример создания плагинов"

#: ../../using_plugins.rst:166
msgid ""
"Let's take a look at example implementation of a plugin that will return "
"data from get requests to :code:`ResourceList`, :code:`ResourceDetail` in"
" a short or detailed view based on pre-set parameter "
":code:`format=short|full`"
msgstr ""
"Рассмотрим пример реализации плагина, который будет отдавать данные в get"
" запросах для :code:`ResourceList`, :code:`ResourceDetail` в двух "
"вариантах либо все, либо укороченные по заранее заданному параметру "
":code:`format=short|full`"

