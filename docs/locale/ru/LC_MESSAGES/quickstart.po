# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, AdCombo
# This file is distributed under the same license as the Combo JSONAPI
# package.
# Suren Khorenyan <surenkhorenyan@gmail.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Combo JSONAPI 1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-06 21:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../quickstart.rst:4
msgid "Example"
msgstr "Пример"

#: ../../quickstart.rst:6
msgid "An example of Flask-COMBO-JSONAPI API with ComboJSONAPI looks like this:"
msgstr "Пример использования Flask-COMBO-JSONAPI API с ComboJSONAPI"

#: ../../quickstart.rst:13
msgid ""
"In this example Flask-SQLAlchemy is used, so you'll need to install it "
"before running this example."
msgstr "В этом примере используется Flask-SQLAlchemy."
"Так что для запуска примера будет необходимо установить эту библиотеку"

#: ../../quickstart.rst:15
msgid "$ pip install flask_sqlalchemy"
msgstr ""

#: ../../quickstart.rst:17
msgid ""
"Save `this file "
"<https://github.com/AdCombo/combojsonapi/blob/master/examples/api.py>`_ "
"as api.py and run it using your Python interpreter. Note that we've "
"enabled `Flask debugging "
"<https://flask.palletsprojects.com/en/2.0.x/quickstart/#debug-mode>`_ "
"mode to provide code reloading and better error messages. ::"
msgstr ""
"Сохраните `этот файл "
"<https://github.com/AdCombo/combojsonapi/blob/master/examples/api.py>`_ "
"как api.py и запустите. В примере активен "
"дебаг режим `Flask debugging "
"<https://flask.palletsprojects.com/en/2.0.x/quickstart/#debug-mode>`_ "
"для авторестарта и более подробных ошибок. ::"

#: ../../quickstart.rst:27
msgid "Debug mode should never be used in a production environment!"
msgstr "Никогда не используйте дебаг режим в продакшене!"

#: ../../quickstart.rst:30
msgid "Classical CRUD operations"
msgstr "Классические CRUD операции"

#: ../../quickstart.rst:33
msgid "Create object"
msgstr "Создание объекта"

#: ../../quickstart.rst:35 ../../quickstart.rst:49 ../../quickstart.rst:63
#: ../../quickstart.rst:86
msgid "Request:"
msgstr "Запрос:"

#: ../../quickstart.rst:40 ../../quickstart.rst:54 ../../quickstart.rst:68
#: ../../quickstart.rst:91
msgid "Response:"
msgstr "Ответ:"

#: ../../quickstart.rst:47
msgid "Get object"
msgstr "Получить объект"

#: ../../quickstart.rst:61
msgid "Get objects"
msgstr "Получить объекты"

#: ../../quickstart.rst:75
msgid "Sparse fields"
msgstr "Выборка полей"

#: ../../quickstart.rst:77
msgid ""
"Note that we tell SQLAlchemy that :code:`full_name` requires "
":code:`first_name` and :code:`first_name` fields. If we don't declare "
"this dependency in model's :code:`Meta.required_fields`, when serialising"
" each model will fire two queries to DB to get these fields."
msgstr ""
"Необходимо отметить, что мы указали SQLAlchemy что поля :code:`full_name` "
"использует поля :code:`first_name` и :code:`first_name`. Если мы не объявим "
"эту зависимость в :code:`Meta.required_fields` модели, то во время сериализации"
" каждая модель выполнит по два запроса в БД чтобы получить эти поля."

#: ../../quickstart.rst:81
msgid ""
"It happens because PermissionPlugin removes not requested fields from the"
" SQL query for the sake of performance. And :code:`Meta.required_fields` "
"will tell PermissionPlugin which fields have to be loaded even if not "
"requested directly."
msgstr ""
"Это происходит потому, что PermissionPlugin убирает невостребованные поля"
" из SQL запроса в пользу производительности. А :code:`Meta.required_fields` "
"подскажет плагину PermissionPlugin какие поля необходимо загрузить"
" даже если они не были запрошены напрямую."
